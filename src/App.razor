@using System.Text.Json;
@using BGGCollections.Components.TableComponent;
@using Microsoft.AspNetCore.Components.Web;
@inject HttpClient Http;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row">
        <div class="col m12">
            @if (RequestedList && data == null) {
                <p><em>Loading...</em></p>
            } else if (RequestedList) {
                <TableComponent PageSize="15" TItem="Game" Data="@data" />
            }
        </div>
    </div>
    <div class="row">
        <div class="col s12">
            <p>Enter Comma Seperated List of Board Game Geek Usernames</p>
            <div class="row">
                <div class="input-field col s6">
                    <input type="text" id="usernames" placeholder="Usernames" @bind="Usernames">
                </div>
                <div class="input-field col s4">
                    <div class="btn waves-effect" @onclick="LoadCollection">Load Collection</div>
                </div>
            </div>
        </div>
    </div>
    <div class="footer">
        Powered by the Board Game Geek API
    </div>
</div>

@code {
    private Dictionary<int, List<string>> Owners;
    private string Usernames = "";
    private bool RequestedList = false;
    private TableData<Game> data;
    


    protected override async Task OnInitializedAsync() {
        string usernameQueryParams = await JSRuntime.InvokeAsync<string>("getQueryParam", "usernames");
        if (usernameQueryParams == "" || usernameQueryParams == null) {
            return;
        }

        RequestedList = true;

        var usernames = usernameQueryParams.Split(',');
        Usernames = string.Join(", ", usernames);
        Dictionary<int, Game> collection = new Dictionary<int, Game>();

        var gamesSet = new HashSet<Game>();
        Owners = new Dictionary<int, List<string>>();

        try {
            foreach (var username in usernames) {
                var cachedList = await JSRuntime.InvokeAsync<string>("getCollection", username);
                List<Game> games;

                if (cachedList != null) {
                    var jsonStr = StringCompressor.DecompressString(cachedList);
                    games = JsonSerializer.Deserialize<List<Game>>(jsonStr);

                    foreach (var game in games) {
                        if (!Owners.ContainsKey(game.GameID)) {
                            Owners.Add(game.GameID, new List<string>());
                        }
                        Owners[game.GameID].Add(username);
                    }
                } else {
                    var xmlDoc = await FetchCollection(username);
                    games = ParseCollection(xmlDoc, username, collection);
                    string json;
                    json = JsonSerializer.Serialize(games);
                    json = StringCompressor.CompressString(json);
                    await JSRuntime.InvokeAsync<string>("storeCollection", username, json);
                }
                gamesSet.UnionWith(games);
            }


            data = new TableData<Game>() {
                Columns = new List<TableColumn<Game>>() {
                    new TableColumn<Game>() {
                        Display = "Game",
                        Field = "Name",
                        Sortable = true,
                        DisplayFunc = (val, row) =>
                            @<a href="https://boardgamegeek.com/boardgame/@row.GameID">@val</a>
                    },
                    new TableColumn<Game>() {
                        Display = "Owned By",
                        DisplayFunc = (val, row) =>
                            @<span>
                                @(Owners.ContainsKey(row.GameID) ? String.Join(", ", Owners[row.GameID]) : "unkown")
                            </span>
                    },
                    new TableColumn<Game>() {
                        Display = "Number of Players",
                        DisplayFunc = (val, row) =>
                            @<span>
                                @(row.MinPlayerCount == row.MaxPlayerCount ? $"{row.MinPlayerCount}" : $"{row.MinPlayerCount} - {row.MaxPlayerCount}")
                            </span>,
                        Sortable = true
                        /* TODO: Custom Sort Func
                            if(columnName == "Number of Players") {
                            GamesList.Sort((game1, game2) => {
                                if (SortAsc) {
                                    return game1.MinPlayerCount.CompareTo(game2.MinPlayerCount);
                                }
                                return game2.MaxPlayerCount.CompareTo(game1.MaxPlayerCount);
                            });
                        */
                    },
                    new TableColumn<Game>() {
                        Display = "Playing Time",
                        Field = "PlayingTime",
                        Sortable = true
                    },
                    new TableColumn<Game>() {
                        Display = "Rating",
                        Field = "Rating",
                        Sortable = true
                    }
                },
                Rows = gamesSet.ToList()
            };
        } catch (Exception e) {
            Console.WriteLine(e.Message);
        }
    }


    protected async Task<XmlDocument> FetchCollection(string username) {
        var url = $"https://api.geekdo.com/xmlapi2/collection?username={username}&brief=1&own=1&stats=1";
        var response = await Http.GetAsync(url);

        while (response.StatusCode == System.Net.HttpStatusCode.Accepted) {
            Thread.Sleep(500);
            response = await Http.GetAsync(url);
        }
        var byteArray = await response.Content.ReadAsByteArrayAsync();
        var responseString = Encoding.UTF8.GetString(byteArray, 0, byteArray.Length);
        var xml = new XmlDocument();
        xml.LoadXml(responseString);

        return xml;
    }

    protected List<Game> ParseCollection(XmlDocument collectionDoc, string owner, Dictionary<int, Game> collection) {
        var userList = new List<Game>();

        foreach(XmlNode item in collectionDoc.GetElementsByTagName("item")) {
            int id = int.Parse(item.Attributes["objectid"].Value);

            if (!Owners.ContainsKey(id)) {
                Owners.Add(id, new List<string>());
            }

            Owners[id].Add(owner);

            Game game = new Game() { GameID = id };
            
            game.Name = item.SelectSingleNode("./name").InnerText;
            var statsNode = item.SelectSingleNode("./stats");
            game.MaxPlayerCount = int.Parse(statsNode.Attributes["maxplayers"].Value);
            game.MinPlayerCount = int.Parse(statsNode.Attributes["minplayers"].Value);
            game.PlayingTime = int.Parse(statsNode.Attributes["playingtime"].Value);
            game.Rating = double.Parse(statsNode.SelectSingleNode("./rating/average").Attributes["value"].Value);
            game.Rating = double.Parse(statsNode.SelectSingleNode("./rating/bayesaverage").Attributes["value"].Value);

            userList.Add(game);
        }

        return userList;
    }

    public void LoadCollection() {
        if (Usernames.Length > 0) {
            var usernames = Usernames.Split(',').Select(username => username.Trim());
            NavigationManager.NavigateTo($"/?usernames={string.Join(",", usernames)}", true);
        }
    }



    public class Game : IEquatable<Game> {
        public string Name { get; set; }
        public int GameID { get; set; }
        public int PlayingTime { get; set; }
        public double Rating { get; set; }
        public double GeekRating { get; set; }
        public int MinPlayerCount { get; set; }
        public int MaxPlayerCount { get; set; }

        public override bool Equals(object obj) {
            return obj is Game && Equals((Game) obj);
        }

        public bool Equals(Game other) {
            return GameID == other.GameID;
        }

        public override int GetHashCode() {
            return GameID;
        }
    }
}
