@typeparam TItem

@if (Data != null) {
    <table class="table highlight">
        <thead>
            <tr>
                @foreach (var column in Data.Columns) {
                    @CreateHeader(column)
                }
            </tr>
        </thead>
        @if (list != null) {
            <tbody>
                @foreach (var row in GetRows()) {
                    <tr>
                        @foreach (var col in Data.Columns) {
                            @CreateCell(row, col)
                        }
                    </tr>
                }
            </tbody>
        }
    </table>
    <ul class="pagination">
        <li class="@(1 == CurrentPage ? "disabled" : "waves-effect")">
            <a @onclick="() => CurrentPage--"><i class="material-icons">chevron_left</i></a>
        </li>
        @foreach (var pageNum in Enumerable.Range(1, PageCount)) {
            <li class="@(pageNum == CurrentPage ? "active" : "waves-effect")">
                <a @onclick="() => CurrentPage = pageNum">@pageNum</a>
            </li>
        }
        <li class="@(PageCount == CurrentPage ? "disabled" : "waves-effect")">
            <a @onclick="() => CurrentPage++"><i class="material-icons">chevron_right</i></a>
        </li>
    </ul>
}

@code {
    [Parameter]
    public TableData<TItem> Data { get; set; }
    [Parameter]
    public int PageSize { get; set; } = 15;

    private List<TItem> list;
    
    private string SortColumn = null;
    private bool SortAsc;
    private int CurrentPage = 1;
    private int PageCount;


    protected override void OnParametersSet() {
        if (Data != null) {
            if (SortColumn == null) {
                list = Data.Rows.ToList();
            } else {
                TableColumn<TItem> col = Data.Columns.Where(c => c.Field == SortColumn)
                    .FirstOrDefault();
                SortTable(col);
            }

            PageCount = (list.Count / PageSize) + 1;
            if (CurrentPage > PageCount) {
                CurrentPage = PageCount;
            }
        }
    }

    private IEnumerable<TItem> GetRows() {
        return list.Skip((CurrentPage - 1) * PageSize)
                    .Take(PageSize);
    }

    private object GetValue(object obj, string field) {
        Console.WriteLine(obj);
        var property = obj.GetType().GetProperty(field != null ? field : "");

        if (property != null) {
            return property.GetValue(obj);
        }

        return null;
    }

    private RenderFragment CreateHeader(TableColumn<TItem> column) {
        if (column.Sortable) {
            return @<th>
                <span @onclick="() => SortTable(column)">
                    @column.Display
                </span>
                @if (column.Field == SortColumn) {
                    <span>
                        <i class="material-icons">@(SortAsc ? "arrow_drop_down" : "arrow_drop_up")</i>
                    </span>
                }
            </th>;
        }
        return @<th><span>@column.Display</span></th>;
    }

    private RenderFragment CreateCell(TItem row, TableColumn<TItem> colDef) {
        var value = GetValue(row, colDef.Field);
        if (colDef.DisplayFunc != null) {
            return @<td>@colDef.DisplayFunc(value, row)</td>;
        }
        return @<td>@value</td>;
    }

    private bool SortTable(TableColumn<TItem> column) {
        if (column.Field == SortColumn) {
            SortAsc = !SortAsc;
        }

        SortColumn = column.Field;


        list = Data.Rows.ToList();
        list.Sort((item1, item2) => {
            dynamic val1 = GetValue(item1, column.Field);
            dynamic val2 = GetValue(item2, column.Field);

            if (val1 == null && val2 == null) {
                return 0;
            } else if (val1 == null) {
                return SortAsc ? 1 : -1;
            } else if (val2 == null) {
                return SortAsc ? -1 : 1;
            }

            if (SortAsc) {
                return val1.CompareTo(val2);
            }
            return val2.CompareTo(val1);
        });

        return true;
    }
}